set wait_key = no
set mbox_type = Maildir
set timeout = 3
set mail_check=30
unset confirmappend

source ~/.mutt/muttboxes
set folder="~/.mutt/boxes/znet"
folder-hook znet set from="jose@ziviani.net"
set spoolfile="+Inbox"
set record="+Sent"
set postponed ="+Drafts"
set mime_forward=ask-no
set mime_forward_rest=yes

set markers=no

set realname = 'Jose R. Ziviani'
set send_charset="utf-8"
set editor='nvim + -f -c "set wrap" -c "set spell spelllang=en"'
set include=yes
set fast_reply
set sleep_time=0
set smtp_url = "smtps://<url>:465/"
set ssl_starttls=yes
set ssl_force_tls=yes

set pgp_timeout=3600
set pgp_show_unusable=no
set pgp_replyencrypt
set pgp_replysign
set pgp_replysignencrypted

set sort = 'threads'
set sort_aux = 'reverse-last-date-received'
set smart_wrap

set header_cache = "~/.mutt/cache"
set message_cachedir = "~/.mutt/cache"

ignore *
unignore From To Reply-To Cc Bcc Subject Date Organization X-Label X-Mailer User-Agent

set sidebar_visible=yes
set sidebar_width = 35
set sidebar_divider_char='│'
set sidebar_short_path=yes
set sidebar_delim_chars="/."
set sidebar_format = "%B%?F? [%F]?%* %?N?%N/?%S"
set mail_check_stats=yes
set sidebar_folder_indent=yes
set sidebar_sort_method=unsorted
set sidebar_indent_string="  "

set index_format = "%4C %Z %{%b %d} %-15.15L %?M?(#%03M)&(%4l)? %?y?{%.20y}? %s (%c)"

set status_chars  = " *%A"
set status_format = "───[ Folder: %f ]───[%r%m messages%?n? (%n new)?%?d? (%d to delete)?%?t? (%t tagged)? ]───%>─%?p?( %p postponed )?───"


folder-hook . "exec collapse-all"

set pager_index_lines=8

# Treat mail as plain when possible
alternative_order text/plain text/html

# Automatically open html messages
auto_view text/html
alternative_order text/plain text/enriched text/html

bind index,pager \Ck sidebar-prev
bind index,pager \Cj sidebar-next
bind index,pager \Cl sidebar-open
#bind index,pager \Cn sidebar-scroll-up
#bind index,pager \Cv sidebar-scroll-down
macro index b '<enter-command>toggle sidebar_visible<enter><refresh>'
macro pager b '<enter-command>toggle sidebar_visible<enter><redraw-screen>'
#macro index,pager \Cn '<sidebar-scroll-up><sidebar-open>'
#macro index,pager \Cv '<sidebar-scroll-down><sidebar-open>'
macro index,pager \Ck '<sidebar-prev><sidebar-open>'
macro index,pager \Cj '<sidebar-next><sidebar-open>'

bind index l display-message
#bind index gg first-entry
bind index G last-entry
bind index J next-entry
bind pager K previous-entry
bind index h noop               # Disable h

#bind pager h exit
#bind pager gg top
bind pager G bottom
bind pager j next-line
bind pager k previous-line

bind browser l select-entry
bind browser L view-file
bind browser gg first-entry
bind browser G last-entry
bind browser h exit

bind attach h exit
bind attach e edit-type # Edit MIME Types
bind attach l view-attach
bind attach <return> view-mailcap

bind index,pager R group-reply

macro index <F8> "<shell-escape>mu find --clearlinks --format=links --linksdir=~/.mutt/search " \
                 "mu find"
macro index <F9> "<change-folder-readonly>~/.mutt/search" \
                 "mu find results"

source ~/.mutt/colors/zivilight.mutt

# Alias auto generation and configuration
set display_filter = ~/.mutt/autoalias
source ~/.mutt/aliasesrc
set alias_file=~/.mutt/aliasesrc

# -*-muttrc-*-
#
# Command formats for gpg.
# 
# This version uses gpg-2comp from 
#   http://70t.de/download/gpg-2comp.tar.gz
#
# $Id$
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# Note that we explicitly set the comment armor header since GnuPG, when used
# in some localiaztion environments, generates 8bit data in that header, thereby
# breaking PGP/MIME.

# decode application/pgp
set pgp_decode_command="gpg --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg --status-fd=2 --no-verbose --quiet --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="gpg --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_clearsign_command="gpg --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command="pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_only_command="pgpewrap gpg --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp %?p?--passphrase-fd 0? -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg %?p?--passphrase-fd 0? --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg --no-verbose --import %f"

# export a key from the public key ring
set pgp_export_command="gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg --verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg --no-verbose --batch --quiet --with-colons --with-fingerprint --with-fingerprint --list-keys %r"

# read in the secret key ring
set pgp_list_secring_command="gpg --no-verbose --batch --quiet --with-colons --with-fingerprint --with-fingerprint --list-secret-keys %r"

# fetch keys
# set pgp_getkeys_command="pkspxycwrap %r"

# pattern for good signature - may need to be adapted to locale!

# set pgp_good_sign="^gpgv?: Good signature from "

# OK, here's a version which uses gnupg's message catalog:
# set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"

# This version uses --status-fd messages
set pgp_good_sign="^\\[GNUPG:\\] GOODSIG"

# pattern to verify a decryption occurred
set pgp_decryption_okay="^\\[GNUPG:\\] DECRYPTION_OKAY"

